#!/usr/bin/python

query collector: machine ads

should be able to do everything thruogh the collector object

want_attrs = [
    'DaemonStartTime',
    'CPUsUsage',
    'Cpus',
    'MemoryUsage',  # max observed
    'GLIDEIN_Site',
    'GLIDEIN_ResourceName',
    'Machine',
]

schema_sql = """
create table data
( tstamp
, %s
);
""" % "\n, ".join(want_attrs)

filter_cond = 'true'

def query_current_attrs(ad):
    """ ad is for collector """
    import htcondor
    import classad
    pool = 'flock.opensciencegrid.org' #:9618
    name = 'yyy'
    dbpath = 'data.db'
    coll = htcondor.Collector(pool)
    colld = coll.locate(htcondor.DaemonTypes.Collector, name)
    db_exists = os.path.exists(dbpath)
    sqldb = sqlite3.connect(dbpath)
    if not db_exists:
        sqldb.execute(schema_sql)

    qmarks = ",".join(["?"]*len(want_attrs))
    insert_sql = "insert into data values (%s)" % qmarks

    current_ts = time.now()
    for job in colld.xquery(filter_cond, want_attrs):
        vals = list(map(job.get, want_attrs))
        sqldb.execute(insert_sql, vals)



def process_one_schedd(ad):
    import htcondor
    import classad
    ad = classad.ClassAd(ad)
    schedd = htcondor.Schedd(ad)
    status_map = {1: "Idle", 2: "Running", 5: "Held"}
    total_results = _newstat()
    gpu_total_results = _newstat()
    vo_results = collections.defaultdict(_newstat)
    job_count = collections.defaultdict(_newstat)
    gpu_job_count = collections.defaultdict(_newstat)
    print >> sys.stderr, "Processing CE %s." % ad.get("Name", "Unknown")
    try:
        for job in schedd.xquery("RoutedJob is UNDEFINED", ["JobStatus", 'x509UserProxyVOName',
                                          'x509UserProxyFirstFQAN', 'x509userproxysubject', 'RequestGPUs']):
            dn = job.get("x509userproxysubject") or 'Unknown'
            vo = job.get('x509UserProxyVOName') or 'Unknown'
            voms = job.get('x509UserProxyFirstFQAN', '').replace("/Capability=NULL", "").replace("/Role=NULL", "") or 'Unknown'
            gpus = job.get('RequestGPUs')
            job_key = (dn, vo, voms)
            results = vo_results[vo]
            job_results = job_count[job_key]
            results["Jobs"] += 1
            total_results['Jobs'] += 1
            job_results['Jobs'] += 1


